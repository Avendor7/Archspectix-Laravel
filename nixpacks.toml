# nixpacks.toml

[phases.setup]
nixPkgs = [
    "php82", # Base PHP 8.2, should include php-fpm
    "php82Extensions.bcmath",
    "php82Extensions.redis",
    "php82Extensions.pdo",    # Often needed for database
    "php82Extensions.mbstring", # Common Laravel requirement
    "php82Extensions.xml",    # Common Laravel requirement
    "php82Extensions.curl",   # For Guzzle/HTTP requests
    "php82Extensions.zip",    # For composer
    "nginx",
    "openssl", # For https and other crypto functions
    "cacert"   # For CA certificates, helps with composer/curl
]
cmds = [
    # Create Nginx config directories
    "mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled",
    # Copy your custom Nginx site configuration
    # Make sure 'config/nginx/default.conf' is the correct path in your project
    "cp config/nginx/default.conf /etc/nginx/sites-available/laravel.conf",
    # Symlink to enable your site configuration
    "ln -sf /etc/nginx/sites-available/laravel.conf /etc/nginx/sites-enabled/laravel.conf",
    # Remove the default Nginx configuration if it exists to avoid conflicts
    "rm -f /etc/nginx/sites-enabled/default",
    "rm -f /etc/nginx/conf.d/default.conf", # Another common location for default
    # Ensure log directory exists and Nginx can write to it
    "mkdir -p /var/log/nginx",
    "touch /var/log/nginx/access.log /var/log/nginx/error.log",
    # Ensure PHP-FPM run directory exists (path might vary)
    "mkdir -p /run/php"
]

[phases.build]
cmds = [
    "composer install --no-interaction --no-dev --optimize-autoloader",
    "php artisan key:generate --force",
    "php artisan config:cache", # Good for production
    "php artisan route:cache",  # Good for production
    "php artisan view:cache",   # Good for production
    "npm install",
    "npm run build",
    # Set permissions for Laravel storage and cache
    # The user Nginx/PHP-FPM runs as might be 'nginx', 'www-data', or 'app'
    # You might need to find out the correct user. 'app' is common in Nixpacks.
    # "chown -R app:app /app/storage /app/bootstrap/cache",
    # "chmod -R 775 /app/storage /app/bootstrap/cache"
]

[start]
# Start PHP-FPM first, then Nginx in the foreground
cmd = "php-fpm82 && nginx -g 'daemon off;'"
# Note: The php-fpm executable might be versioned like php-fpm8.2 or php-fpm82
# Check the actual executable name provided by the php82 Nix package if 'php-fpm' doesn't work.

[ports]
# Nginx inside the container will listen on port 80
ports = ["80"]
